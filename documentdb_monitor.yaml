AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a Lambda to monitor DocumentDB cursors in a VPC
Parameters:
  ParamS3Bucket:
    Description: The S3 Bucket that holds the lambda code
    Type: String
  ParamS3Key:
    Description: The S3 key for the lambda code zip file
    Type: String
  MasterUsername:
    Description: The documentDB username to run the serverStatus command
    Type: String
  MasterUserPassword:
    Description: The documentDB password to run the serverStatus command
    Type: String
    NoEcho: true
  CriticalTreshold:
    Description: The threshold for critical alerting 
    Type: Number
    Default: 0.95
  WarningTreshold:
    Description: The threshold for warning alerting
    Type: Number
    Default: 0.8
  SubnetIds:
    Description: The SubnetIds where the documentDB instances are deployed and where the Lambda will be deploy
    Type: List<AWS::EC2::Subnet::Id>
  VpcSecurityGroupIds:
    Description: The security groups where the Lambda will be deploy
    Type: List<AWS::EC2::SecurityGroup::Id>
  KMSKey:
    Description: The ARN of the KMS Key used to decrypt the docdb user password
    Type: String
  MonitorTag:
    Description: The tag that identifies the clusters to be monitored
    Type: String
    Default: 'production'
#  KMSEncrytionKeyForVariableEnvs:
#    Description: The ARN of the key that will be used to decrypt password
#    Type: String
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationRead
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: AllowLambdaToWriteLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
              - Sid: AllowLambdaToCreateLogGroups
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: LambdaVPCAccessExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'
        - PolicyName: PublishSNS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopic
        - PolicyName: KMSDecrypt
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Ref KMSKey
        - PolicyName: DocumentDBDescribe
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:ListTagsForResource
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                  - rds:DescribeDBClusterParameters
                Resource: '*'
        - PolicyName: LambdaDescribe
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                Resource: '*'
      RoleName: !Sub "DocumentDB-Monitor-${AWS::StackName}"
      Path:
        Fn::Sub: /
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: !Sub "aws-sns-${AWS::StackName}"  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref ParamS3Bucket
        S3Key: !Ref ParamS3Key
      Description: 'Lambda to monitor documentdb cursors'
      Environment:
        Variables:
          critical_threshold: !Ref CriticalTreshold
          warning_threshold: !Ref WarningTreshold
          cursors_limit: '450'
          db_port: '27017'
          monitor_tag: !Ref MonitorTag
          pem_locator: 'rds-combined-ca-bundle.pem'
          sns_topic_arn: !Ref SNSTopic
          username: !Ref MasterUsername
          password: !Ref MasterUserPassword
      FunctionName: !Sub "aws-lambda-${AWS::StackName}"
      Handler: 'lambda_function.lambda_handler'
      MemorySize: 256
      Role:
        Fn::GetAtt: LambdaRole.Arn
      Runtime: python3.7
      Timeout: 60
      VpcConfig: 
        SecurityGroupIds: !Ref VpcSecurityGroupIds
        SubnetIds: !Ref SubnetIds
    DependsOn: SNSTopic
  Scheduler:
    Type: AWS::Events::Rule
    Properties: 
      Description: 'Rule that triggers the Lambda function'
      Name: !Sub "aws-rule-${AWS::StackName}"
      ScheduleExpression: "rate(1 hour)"
      State: DISABLED
      Targets: 
        - Arn: !GetAtt LambdaFunction.Arn
          Id: !Sub "id-lambda-${AWS::StackName}"
    DependsOn: LambdaFunction
Outputs:
  LambdaFunctionARN:
    Description: The ARN of the lambda function
    Value:
      !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "aws-export-name-${AWS::StackName}"